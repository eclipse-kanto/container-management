// Copyright (c) 2022 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0
//
// SPDX-License-Identifier: EPL-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: ./containerm/ctr/ctrd_resources_mgr.go

// Package ctr is a generated GoMock package.
package ctr

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockresourcesManager is a mock of resourcesManager interface.
type MockresourcesManager struct {
	ctrl     *gomock.Controller
	recorder *MockresourcesManagerMockRecorder
}

// MockresourcesManagerMockRecorder is the mock recorder for MockresourcesManager.
type MockresourcesManagerMockRecorder struct {
	mock *MockresourcesManager
}

// NewMockresourcesManager creates a new mock instance.
func NewMockresourcesManager(ctrl *gomock.Controller) *MockresourcesManager {
	mock := &MockresourcesManager{ctrl: ctrl}
	mock.recorder = &MockresourcesManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockresourcesManager) EXPECT() *MockresourcesManagerMockRecorder {
	return m.recorder
}

// Dispose mocks base method.
func (m *MockresourcesManager) Dispose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispose")
}

// Dispose indicates an expected call of Dispose.
func (mr *MockresourcesManagerMockRecorder) Dispose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispose", reflect.TypeOf((*MockresourcesManager)(nil).Dispose))
}

// Watch mocks base method.
func (m *MockresourcesManager) Watch(resourceID string, duration time.Duration, expiredHandler watchExpired) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", resourceID, duration, expiredHandler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockresourcesManagerMockRecorder) Watch(resourceID, duration, expiredHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockresourcesManager)(nil).Watch), resourceID, duration, expiredHandler)
}
