// Copyright (c) 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: containerm/ctr/ctrd_cio_mgr.go

// Package ctr is a generated GoMock package.
package ctr

import (
	reflect "reflect"

	cio "github.com/containerd/containerd/cio"
	types "github.com/eclipse-kanto/container-management/containerm/containers/types"
	logger "github.com/eclipse-kanto/container-management/containerm/logger"
	gomock "github.com/golang/mock/gomock"
)

// MockcontainerIOManager is a mock of containerIOManager interface.
type MockcontainerIOManager struct {
	ctrl     *gomock.Controller
	recorder *MockcontainerIOManagerMockRecorder
}

// MockcontainerIOManagerMockRecorder is the mock recorder for MockcontainerIOManager.
type MockcontainerIOManagerMockRecorder struct {
	mock *MockcontainerIOManager
}

// NewMockcontainerIOManager creates a new mock instance.
func NewMockcontainerIOManager(ctrl *gomock.Controller) *MockcontainerIOManager {
	mock := &MockcontainerIOManager{ctrl: ctrl}
	mock.recorder = &MockcontainerIOManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcontainerIOManager) EXPECT() *MockcontainerIOManagerMockRecorder {
	return m.recorder
}

// ClearIO mocks base method.
func (m *MockcontainerIOManager) ClearIO(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearIO", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearIO indicates an expected call of ClearIO.
func (mr *MockcontainerIOManagerMockRecorder) ClearIO(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearIO", reflect.TypeOf((*MockcontainerIOManager)(nil).ClearIO), id)
}

// CloseIO mocks base method.
func (m *MockcontainerIOManager) CloseIO(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseIO", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseIO indicates an expected call of CloseIO.
func (mr *MockcontainerIOManagerMockRecorder) CloseIO(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseIO", reflect.TypeOf((*MockcontainerIOManager)(nil).CloseIO), id)
}

// ConfigureIO mocks base method.
func (m *MockcontainerIOManager) ConfigureIO(id string, logDriver logger.LogDriver, logModeCfg *types.LogModeConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureIO", id, logDriver, logModeCfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureIO indicates an expected call of ConfigureIO.
func (mr *MockcontainerIOManagerMockRecorder) ConfigureIO(id, logDriver, logModeCfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureIO", reflect.TypeOf((*MockcontainerIOManager)(nil).ConfigureIO), id, logDriver, logModeCfg)
}

// ExistsIO mocks base method.
func (m *MockcontainerIOManager) ExistsIO(id string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsIO", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistsIO indicates an expected call of ExistsIO.
func (mr *MockcontainerIOManagerMockRecorder) ExistsIO(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsIO", reflect.TypeOf((*MockcontainerIOManager)(nil).ExistsIO), id)
}

// GetIO mocks base method.
func (m *MockcontainerIOManager) GetIO(id string) IO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIO", id)
	ret0, _ := ret[0].(IO)
	return ret0
}

// GetIO indicates an expected call of GetIO.
func (mr *MockcontainerIOManagerMockRecorder) GetIO(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIO", reflect.TypeOf((*MockcontainerIOManager)(nil).GetIO), id)
}

// InitIO mocks base method.
func (m *MockcontainerIOManager) InitIO(id string, withStdin bool) (IO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitIO", id, withStdin)
	ret0, _ := ret[0].(IO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitIO indicates an expected call of InitIO.
func (mr *MockcontainerIOManagerMockRecorder) InitIO(id, withStdin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitIO", reflect.TypeOf((*MockcontainerIOManager)(nil).InitIO), id, withStdin)
}

// NewCioAttach mocks base method.
func (m *MockcontainerIOManager) NewCioAttach(id string) cio.Attach {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCioAttach", id)
	ret0, _ := ret[0].(cio.Attach)
	return ret0
}

// NewCioAttach indicates an expected call of NewCioAttach.
func (mr *MockcontainerIOManagerMockRecorder) NewCioAttach(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCioAttach", reflect.TypeOf((*MockcontainerIOManager)(nil).NewCioAttach), id)
}

// NewCioCreator mocks base method.
func (m *MockcontainerIOManager) NewCioCreator(withTerminal bool) cio.Creator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCioCreator", withTerminal)
	ret0, _ := ret[0].(cio.Creator)
	return ret0
}

// NewCioCreator indicates an expected call of NewCioCreator.
func (mr *MockcontainerIOManagerMockRecorder) NewCioCreator(withTerminal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCioCreator", reflect.TypeOf((*MockcontainerIOManager)(nil).NewCioCreator), withTerminal)
}

// ResetIO mocks base method.
func (m *MockcontainerIOManager) ResetIO(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetIO", id)
}

// ResetIO indicates an expected call of ResetIO.
func (mr *MockcontainerIOManagerMockRecorder) ResetIO(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetIO", reflect.TypeOf((*MockcontainerIOManager)(nil).ResetIO), id)
}
