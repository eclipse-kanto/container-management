// Copyright (c) 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: ./containerm/ctr/ctr_verifier.go

// Package mocks is a generated GoMock package.
package ctr

import (
	context "context"
	reflect "reflect"

	types "github.com/eclipse-kanto/container-management/containerm/containers/types"
	gomock "github.com/golang/mock/gomock"
)

// MockcontainerVerifier is a mock of containerVerifier interface.
type MockcontainerVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockcontainerVerifierMockRecorder
}

// MockcontainerVerifierMockRecorder is the mock recorder for MockcontainerVerifier.
type MockcontainerVerifierMockRecorder struct {
	mock *MockcontainerVerifier
}

// NewMockcontainerVerifier creates a new mock instance.
func NewMockcontainerVerifier(ctrl *gomock.Controller) *MockcontainerVerifier {
	mock := &MockcontainerVerifier{ctrl: ctrl}
	mock.recorder = &MockcontainerVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcontainerVerifier) EXPECT() *MockcontainerVerifierMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockcontainerVerifier) Verify(arg0 context.Context, arg1 types.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockcontainerVerifierMockRecorder) Verify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockcontainerVerifier)(nil).Verify), arg0, arg1)
}
