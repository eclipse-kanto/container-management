// Copyright (c) 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: sandbox.go

// Package mocks is a generated GoMock package.
package mocks

import (
	libnetwork "github.com/docker/docker/libnetwork"
	types "github.com/docker/docker/libnetwork/types"
	gomock "github.com/golang/mock/gomock"
	net "net"
	reflect "reflect"
)

// MockSandbox is a mock of Sandbox interface
type MockSandbox struct {
	ctrl     *gomock.Controller
	recorder *MockSandboxMockRecorder
}

// MockSandboxMockRecorder is the mock recorder for MockSandbox
type MockSandboxMockRecorder struct {
	mock *MockSandbox
}

// NewMockSandbox creates a new mock instance
func NewMockSandbox(ctrl *gomock.Controller) *MockSandbox {
	mock := &MockSandbox{ctrl: ctrl}
	mock.recorder = &MockSandboxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSandbox) EXPECT() *MockSandboxMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockSandbox) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockSandboxMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockSandbox)(nil).ID))
}

// Key mocks base method
func (m *MockSandbox) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key
func (mr *MockSandboxMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockSandbox)(nil).Key))
}

// ContainerID mocks base method
func (m *MockSandbox) ContainerID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ContainerID indicates an expected call of ContainerID
func (mr *MockSandboxMockRecorder) ContainerID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerID", reflect.TypeOf((*MockSandbox)(nil).ContainerID))
}

// Labels mocks base method
func (m *MockSandbox) Labels() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockSandboxMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockSandbox)(nil).Labels))
}

// Statistics mocks base method
func (m *MockSandbox) Statistics() (map[string]*types.InterfaceStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics")
	ret0, _ := ret[0].(map[string]*types.InterfaceStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statistics indicates an expected call of Statistics
func (mr *MockSandboxMockRecorder) Statistics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockSandbox)(nil).Statistics))
}

// Refresh mocks base method
func (m *MockSandbox) Refresh(options ...libnetwork.SandboxOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Refresh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh
func (mr *MockSandboxMockRecorder) Refresh(options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockSandbox)(nil).Refresh), options...)
}

// SetKey mocks base method
func (m *MockSandbox) SetKey(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKey", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKey indicates an expected call of SetKey
func (mr *MockSandboxMockRecorder) SetKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKey", reflect.TypeOf((*MockSandbox)(nil).SetKey), key)
}

// Rename mocks base method
func (m *MockSandbox) Rename(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename
func (mr *MockSandboxMockRecorder) Rename(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockSandbox)(nil).Rename), name)
}

// Delete mocks base method
func (m *MockSandbox) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSandboxMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSandbox)(nil).Delete))
}

// Endpoints mocks base method
func (m *MockSandbox) Endpoints() []libnetwork.Endpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoints")
	ret0, _ := ret[0].([]libnetwork.Endpoint)
	return ret0
}

// Endpoints indicates an expected call of Endpoints
func (mr *MockSandboxMockRecorder) Endpoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoints", reflect.TypeOf((*MockSandbox)(nil).Endpoints))
}

// ResolveService mocks base method
func (m *MockSandbox) ResolveService(name string) ([]*net.SRV, []net.IP) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveService", name)
	ret0, _ := ret[0].([]*net.SRV)
	ret1, _ := ret[1].([]net.IP)
	return ret0, ret1
}

// ResolveService indicates an expected call of ResolveService
func (mr *MockSandboxMockRecorder) ResolveService(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveService", reflect.TypeOf((*MockSandbox)(nil).ResolveService), name)
}

// EnableService mocks base method
func (m *MockSandbox) EnableService() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableService")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableService indicates an expected call of EnableService
func (mr *MockSandboxMockRecorder) EnableService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableService", reflect.TypeOf((*MockSandbox)(nil).EnableService))
}

// DisableService mocks base method
func (m *MockSandbox) DisableService() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableService")
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableService indicates an expected call of DisableService
func (mr *MockSandboxMockRecorder) DisableService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableService", reflect.TypeOf((*MockSandbox)(nil).DisableService))
}
