// Copyright (c) 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	libnetwork "github.com/docker/docker/libnetwork"
	cluster "github.com/docker/docker/libnetwork/cluster"
	config "github.com/docker/docker/libnetwork/config"
	types "github.com/docker/docker/libnetwork/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNetworkController is a mock of NetworkController interface
type MockNetworkController struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkControllerMockRecorder
}

// MockNetworkControllerMockRecorder is the mock recorder for MockNetworkController
type MockNetworkControllerMockRecorder struct {
	mock *MockNetworkController
}

// NewMockNetworkController creates a new mock instance
func NewMockNetworkController(ctrl *gomock.Controller) *MockNetworkController {
	mock := &MockNetworkController{ctrl: ctrl}
	mock.recorder = &MockNetworkControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkController) EXPECT() *MockNetworkControllerMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockNetworkController) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockNetworkControllerMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockNetworkController)(nil).ID))
}

// BuiltinDrivers mocks base method
func (m *MockNetworkController) BuiltinDrivers() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuiltinDrivers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// BuiltinDrivers indicates an expected call of BuiltinDrivers
func (mr *MockNetworkControllerMockRecorder) BuiltinDrivers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuiltinDrivers", reflect.TypeOf((*MockNetworkController)(nil).BuiltinDrivers))
}

// BuiltinIPAMDrivers mocks base method
func (m *MockNetworkController) BuiltinIPAMDrivers() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuiltinIPAMDrivers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// BuiltinIPAMDrivers indicates an expected call of BuiltinIPAMDrivers
func (mr *MockNetworkControllerMockRecorder) BuiltinIPAMDrivers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuiltinIPAMDrivers", reflect.TypeOf((*MockNetworkController)(nil).BuiltinIPAMDrivers))
}

// Config mocks base method
func (m *MockNetworkController) Config() config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(config.Config)
	return ret0
}

// Config indicates an expected call of Config
func (mr *MockNetworkControllerMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockNetworkController)(nil).Config))
}

// NewNetwork mocks base method
func (m *MockNetworkController) NewNetwork(networkType, name, id string, options ...libnetwork.NetworkOption) (libnetwork.Network, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{networkType, name, id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNetwork", varargs...)
	ret0, _ := ret[0].(libnetwork.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNetwork indicates an expected call of NewNetwork
func (mr *MockNetworkControllerMockRecorder) NewNetwork(networkType, name, id interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{networkType, name, id}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNetwork", reflect.TypeOf((*MockNetworkController)(nil).NewNetwork), varargs...)
}

// Networks mocks base method
func (m *MockNetworkController) Networks() []libnetwork.Network {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Networks")
	ret0, _ := ret[0].([]libnetwork.Network)
	return ret0
}

// Networks indicates an expected call of Networks
func (mr *MockNetworkControllerMockRecorder) Networks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Networks", reflect.TypeOf((*MockNetworkController)(nil).Networks))
}

// WalkNetworks mocks base method
func (m *MockNetworkController) WalkNetworks(walker libnetwork.NetworkWalker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WalkNetworks", walker)
}

// WalkNetworks indicates an expected call of WalkNetworks
func (mr *MockNetworkControllerMockRecorder) WalkNetworks(walker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkNetworks", reflect.TypeOf((*MockNetworkController)(nil).WalkNetworks), walker)
}

// NetworkByName mocks base method
func (m *MockNetworkController) NetworkByName(name string) (libnetwork.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkByName", name)
	ret0, _ := ret[0].(libnetwork.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkByName indicates an expected call of NetworkByName
func (mr *MockNetworkControllerMockRecorder) NetworkByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkByName", reflect.TypeOf((*MockNetworkController)(nil).NetworkByName), name)
}

// NetworkByID mocks base method
func (m *MockNetworkController) NetworkByID(id string) (libnetwork.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkByID", id)
	ret0, _ := ret[0].(libnetwork.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkByID indicates an expected call of NetworkByID
func (mr *MockNetworkControllerMockRecorder) NetworkByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkByID", reflect.TypeOf((*MockNetworkController)(nil).NetworkByID), id)
}

// NewSandbox mocks base method
func (m *MockNetworkController) NewSandbox(containerID string, options ...libnetwork.SandboxOption) (libnetwork.Sandbox, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{containerID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewSandbox", varargs...)
	ret0, _ := ret[0].(libnetwork.Sandbox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSandbox indicates an expected call of NewSandbox
func (mr *MockNetworkControllerMockRecorder) NewSandbox(containerID interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{containerID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSandbox", reflect.TypeOf((*MockNetworkController)(nil).NewSandbox), varargs...)
}

// Sandboxes mocks base method
func (m *MockNetworkController) Sandboxes() []libnetwork.Sandbox {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sandboxes")
	ret0, _ := ret[0].([]libnetwork.Sandbox)
	return ret0
}

// Sandboxes indicates an expected call of Sandboxes
func (mr *MockNetworkControllerMockRecorder) Sandboxes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sandboxes", reflect.TypeOf((*MockNetworkController)(nil).Sandboxes))
}

// WalkSandboxes mocks base method
func (m *MockNetworkController) WalkSandboxes(walker libnetwork.SandboxWalker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WalkSandboxes", walker)
}

// WalkSandboxes indicates an expected call of WalkSandboxes
func (mr *MockNetworkControllerMockRecorder) WalkSandboxes(walker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkSandboxes", reflect.TypeOf((*MockNetworkController)(nil).WalkSandboxes), walker)
}

// SandboxByID mocks base method
func (m *MockNetworkController) SandboxByID(id string) (libnetwork.Sandbox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SandboxByID", id)
	ret0, _ := ret[0].(libnetwork.Sandbox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SandboxByID indicates an expected call of SandboxByID
func (mr *MockNetworkControllerMockRecorder) SandboxByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SandboxByID", reflect.TypeOf((*MockNetworkController)(nil).SandboxByID), id)
}

// SandboxDestroy mocks base method
func (m *MockNetworkController) SandboxDestroy(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SandboxDestroy", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SandboxDestroy indicates an expected call of SandboxDestroy
func (mr *MockNetworkControllerMockRecorder) SandboxDestroy(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SandboxDestroy", reflect.TypeOf((*MockNetworkController)(nil).SandboxDestroy), id)
}

// Stop mocks base method
func (m *MockNetworkController) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockNetworkControllerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNetworkController)(nil).Stop))
}

// ReloadConfiguration mocks base method
func (m *MockNetworkController) ReloadConfiguration(cfgOptions ...config.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range cfgOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReloadConfiguration", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadConfiguration indicates an expected call of ReloadConfiguration
func (mr *MockNetworkControllerMockRecorder) ReloadConfiguration(cfgOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadConfiguration", reflect.TypeOf((*MockNetworkController)(nil).ReloadConfiguration), cfgOptions...)
}

// SetClusterProvider mocks base method
func (m *MockNetworkController) SetClusterProvider(provider cluster.Provider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClusterProvider", provider)
}

// SetClusterProvider indicates an expected call of SetClusterProvider
func (mr *MockNetworkControllerMockRecorder) SetClusterProvider(provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClusterProvider", reflect.TypeOf((*MockNetworkController)(nil).SetClusterProvider), provider)
}

// AgentInitWait mocks base method
func (m *MockNetworkController) AgentInitWait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AgentInitWait")
}

// AgentInitWait indicates an expected call of AgentInitWait
func (mr *MockNetworkControllerMockRecorder) AgentInitWait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentInitWait", reflect.TypeOf((*MockNetworkController)(nil).AgentInitWait))
}

// AgentStopWait mocks base method
func (m *MockNetworkController) AgentStopWait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AgentStopWait")
}

// AgentStopWait indicates an expected call of AgentStopWait
func (mr *MockNetworkControllerMockRecorder) AgentStopWait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentStopWait", reflect.TypeOf((*MockNetworkController)(nil).AgentStopWait))
}

// SetKeys mocks base method
func (m *MockNetworkController) SetKeys(keys []*types.EncryptionKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKeys", keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKeys indicates an expected call of SetKeys
func (mr *MockNetworkControllerMockRecorder) SetKeys(keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeys", reflect.TypeOf((*MockNetworkController)(nil).SetKeys), keys)
}

// StartDiagnostic mocks base method
func (m *MockNetworkController) StartDiagnostic(port int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartDiagnostic", port)
}

// StartDiagnostic indicates an expected call of StartDiagnostic
func (mr *MockNetworkControllerMockRecorder) StartDiagnostic(port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDiagnostic", reflect.TypeOf((*MockNetworkController)(nil).StartDiagnostic), port)
}

// StopDiagnostic mocks base method
func (m *MockNetworkController) StopDiagnostic() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopDiagnostic")
}

// StopDiagnostic indicates an expected call of StopDiagnostic
func (mr *MockNetworkControllerMockRecorder) StopDiagnostic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDiagnostic", reflect.TypeOf((*MockNetworkController)(nil).StopDiagnostic))
}

// IsDiagnosticEnabled mocks base method
func (m *MockNetworkController) IsDiagnosticEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDiagnosticEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDiagnosticEnabled indicates an expected call of IsDiagnosticEnabled
func (mr *MockNetworkControllerMockRecorder) IsDiagnosticEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDiagnosticEnabled", reflect.TypeOf((*MockNetworkController)(nil).IsDiagnosticEnabled))
}
