// Copyright (c) 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: containerm/things/features_container_factory_persistence.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockcontainerStorage is a mock of containerStorage interface
type MockcontainerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockcontainerStorageMockRecorder
}

// MockcontainerStorageMockRecorder is the mock recorder for MockcontainerStorage
type MockcontainerStorageMockRecorder struct {
	mock *MockcontainerStorage
}

// NewMockcontainerStorage creates a new mock instance
func NewMockcontainerStorage(ctrl *gomock.Controller) *MockcontainerStorage {
	mock := &MockcontainerStorage{ctrl: ctrl}
	mock.recorder = &MockcontainerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcontainerStorage) EXPECT() *MockcontainerStorageMockRecorder {
	return m.recorder
}

// Restore mocks base method
func (m *MockcontainerStorage) Restore() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restore indicates an expected call of Restore
func (mr *MockcontainerStorageMockRecorder) Restore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockcontainerStorage)(nil).Restore))
}

// UpdateContainersInfo mocks base method
func (m *MockcontainerStorage) UpdateContainersInfo(ctrFeaturesInfo map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateContainersInfo", ctrFeaturesInfo)
}

// UpdateContainersInfo indicates an expected call of UpdateContainersInfo
func (mr *MockcontainerStorageMockRecorder) UpdateContainersInfo(ctrFeaturesInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainersInfo", reflect.TypeOf((*MockcontainerStorage)(nil).UpdateContainersInfo), ctrFeaturesInfo)
}

// StoreContainerInfo mocks base method
func (m *MockcontainerStorage) StoreContainerInfo(ctrId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StoreContainerInfo", ctrId)
}

// StoreContainerInfo indicates an expected call of StoreContainerInfo
func (mr *MockcontainerStorageMockRecorder) StoreContainerInfo(ctrId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreContainerInfo", reflect.TypeOf((*MockcontainerStorage)(nil).StoreContainerInfo), ctrId)
}

// DeleteContainerInfo mocks base method
func (m *MockcontainerStorage) DeleteContainerInfo(ctrId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteContainerInfo", ctrId)
}

// DeleteContainerInfo indicates an expected call of DeleteContainerInfo
func (mr *MockcontainerStorageMockRecorder) DeleteContainerInfo(ctrId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerInfo", reflect.TypeOf((*MockcontainerStorage)(nil).DeleteContainerInfo), ctrId)
}
