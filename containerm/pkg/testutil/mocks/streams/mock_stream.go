// Copyright (c) 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: containerm/streams/stream.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	streams "github.com/eclipse-kanto/container-management/containerm/streams"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockStream is a mock of Stream interface
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// Stdin mocks base method
func (m *MockStream) Stdin() io.ReadCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdin")
	ret0, _ := ret[0].(io.ReadCloser)
	return ret0
}

// Stdin indicates an expected call of Stdin
func (mr *MockStreamMockRecorder) Stdin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdin", reflect.TypeOf((*MockStream)(nil).Stdin))
}

// StdinPipe mocks base method
func (m *MockStream) StdinPipe() io.WriteCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StdinPipe")
	ret0, _ := ret[0].(io.WriteCloser)
	return ret0
}

// StdinPipe indicates an expected call of StdinPipe
func (mr *MockStreamMockRecorder) StdinPipe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdinPipe", reflect.TypeOf((*MockStream)(nil).StdinPipe))
}

// NewStdinInput mocks base method
func (m *MockStream) NewStdinInput() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewStdinInput")
}

// NewStdinInput indicates an expected call of NewStdinInput
func (mr *MockStreamMockRecorder) NewStdinInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStdinInput", reflect.TypeOf((*MockStream)(nil).NewStdinInput))
}

// NewDiscardStdinInput mocks base method
func (m *MockStream) NewDiscardStdinInput() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewDiscardStdinInput")
}

// NewDiscardStdinInput indicates an expected call of NewDiscardStdinInput
func (mr *MockStreamMockRecorder) NewDiscardStdinInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDiscardStdinInput", reflect.TypeOf((*MockStream)(nil).NewDiscardStdinInput))
}

// Stdout mocks base method
func (m *MockStream) Stdout() io.WriteCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdout")
	ret0, _ := ret[0].(io.WriteCloser)
	return ret0
}

// Stdout indicates an expected call of Stdout
func (mr *MockStreamMockRecorder) Stdout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdout", reflect.TypeOf((*MockStream)(nil).Stdout))
}

// AddStdoutWriter mocks base method
func (m *MockStream) AddStdoutWriter(w io.WriteCloser) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStdoutWriter", w)
}

// AddStdoutWriter indicates an expected call of AddStdoutWriter
func (mr *MockStreamMockRecorder) AddStdoutWriter(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStdoutWriter", reflect.TypeOf((*MockStream)(nil).AddStdoutWriter), w)
}

// AddStderrWriter mocks base method
func (m *MockStream) AddStderrWriter(w io.WriteCloser) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStderrWriter", w)
}

// AddStderrWriter indicates an expected call of AddStderrWriter
func (mr *MockStreamMockRecorder) AddStderrWriter(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStderrWriter", reflect.TypeOf((*MockStream)(nil).AddStderrWriter), w)
}

// Stderr mocks base method
func (m *MockStream) Stderr() io.WriteCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stderr")
	ret0, _ := ret[0].(io.WriteCloser)
	return ret0
}

// Stderr indicates an expected call of Stderr
func (mr *MockStreamMockRecorder) Stderr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stderr", reflect.TypeOf((*MockStream)(nil).Stderr))
}

// NewStdoutPipe mocks base method
func (m *MockStream) NewStdoutPipe() io.ReadCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStdoutPipe")
	ret0, _ := ret[0].(io.ReadCloser)
	return ret0
}

// NewStdoutPipe indicates an expected call of NewStdoutPipe
func (mr *MockStreamMockRecorder) NewStdoutPipe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStdoutPipe", reflect.TypeOf((*MockStream)(nil).NewStdoutPipe))
}

// NewStderrPipe mocks base method
func (m *MockStream) NewStderrPipe() io.ReadCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStderrPipe")
	ret0, _ := ret[0].(io.ReadCloser)
	return ret0
}

// NewStderrPipe indicates an expected call of NewStderrPipe
func (mr *MockStreamMockRecorder) NewStderrPipe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStderrPipe", reflect.TypeOf((*MockStream)(nil).NewStderrPipe))
}

// Attach mocks base method
func (m *MockStream) Attach(ctx context.Context, cfg *streams.AttachConfig) <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attach", ctx, cfg)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Attach indicates an expected call of Attach
func (mr *MockStreamMockRecorder) Attach(ctx, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*MockStream)(nil).Attach), ctx, cfg)
}

// CopyPipes mocks base method
func (m *MockStream) CopyPipes(p streams.Pipes) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CopyPipes", p)
}

// CopyPipes indicates an expected call of CopyPipes
func (mr *MockStreamMockRecorder) CopyPipes(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyPipes", reflect.TypeOf((*MockStream)(nil).CopyPipes), p)
}

// Close mocks base method
func (m *MockStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStream)(nil).Close))
}

// Wait mocks base method
func (m *MockStream) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait
func (mr *MockStreamMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockStream)(nil).Wait))
}
