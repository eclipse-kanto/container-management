// Copyright (c) 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: containerm/registry/registry.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockGrpcService is a mock of GrpcService interface.
type MockGrpcService struct {
	ctrl     *gomock.Controller
	recorder *MockGrpcServiceMockRecorder
}

// MockGrpcServiceMockRecorder is the mock recorder for MockGrpcService.
type MockGrpcServiceMockRecorder struct {
	mock *MockGrpcService
}

// NewMockGrpcService creates a new mock instance.
func NewMockGrpcService(ctrl *gomock.Controller) *MockGrpcService {
	mock := &MockGrpcService{ctrl: ctrl}
	mock.recorder = &MockGrpcServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGrpcService) EXPECT() *MockGrpcServiceMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockGrpcService) Register(arg0 *grpc.Server) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockGrpcServiceMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockGrpcService)(nil).Register), arg0)
}

// MockGrpcServer is a mock of GrpcServer interface.
type MockGrpcServer struct {
	ctrl     *gomock.Controller
	recorder *MockGrpcServerMockRecorder
}

// MockGrpcServerMockRecorder is the mock recorder for MockGrpcServer.
type MockGrpcServerMockRecorder struct {
	mock *MockGrpcServer
}

// NewMockGrpcServer creates a new mock instance.
func NewMockGrpcServer(ctrl *gomock.Controller) *MockGrpcServer {
	mock := &MockGrpcServer{ctrl: ctrl}
	mock.recorder = &MockGrpcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGrpcServer) EXPECT() *MockGrpcServerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockGrpcServer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockGrpcServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockGrpcServer)(nil).Start))
}

// Stop mocks base method.
func (m *MockGrpcServer) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockGrpcServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockGrpcServer)(nil).Stop))
}
