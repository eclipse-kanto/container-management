// Copyright (c) 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: ./containerm/updateagent/update_operation.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/eclipse-kanto/update-manager/api/types"

	gomock "github.com/golang/mock/gomock"
)

// MockUpdateOperation is a mock of UpdateOperation interface.
type MockUpdateOperation struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateOperationMockRecorder
}

// MockUpdateOperationMockRecorder is the mock recorder for MockUpdateOperation.
type MockUpdateOperationMockRecorder struct {
	mock *MockUpdateOperation
}

// NewMockUpdateOperation creates a new mock instance.
func NewMockUpdateOperation(ctrl *gomock.Controller) *MockUpdateOperation {
	mock := &MockUpdateOperation{ctrl: ctrl}
	mock.recorder = &MockUpdateOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateOperation) EXPECT() *MockUpdateOperationMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockUpdateOperation) Execute(command types.CommandType, baseline string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", command, baseline)
}

// Execute indicates an expected call of Execute.
func (mr *MockUpdateOperationMockRecorder) Execute(command, baseline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdateOperation)(nil).Execute), command, baseline)
}

// Feedback mocks base method.
func (m *MockUpdateOperation) Feedback(status types.StatusType, message, baseline string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Feedback", status, message, baseline)
}

// Feedback indicates an expected call of Feedback.
func (mr *MockUpdateOperationMockRecorder) Feedback(status, message, baseline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Feedback", reflect.TypeOf((*MockUpdateOperation)(nil).Feedback), status, message, baseline)
}

// Identify mocks base method.
func (m *MockUpdateOperation) Identify() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identify")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Identify indicates an expected call of Identify.
func (mr *MockUpdateOperationMockRecorder) Identify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identify", reflect.TypeOf((*MockUpdateOperation)(nil).Identify))
}

// GetActivityID mocks base method.
func (m *MockUpdateOperation) GetActivityID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivityID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetActivityID indicates an expected call of GetActivityID.
func (mr *MockUpdateOperationMockRecorder) GetActivityID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivityID", reflect.TypeOf((*MockUpdateOperation)(nil).GetActivityID))
}
