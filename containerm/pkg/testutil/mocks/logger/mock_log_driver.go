// Copyright (c) 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: containerm/logger/log_driver.go

// Package mocks is a generated GoMock package.
package mocks

import (
	logger "github.com/eclipse-kanto/container-management/containerm/logger"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLogDriver is a mock of LogDriver interface
type MockLogDriver struct {
	ctrl     *gomock.Controller
	recorder *MockLogDriverMockRecorder
}

// MockLogDriverMockRecorder is the mock recorder for MockLogDriver
type MockLogDriverMockRecorder struct {
	mock *MockLogDriver
}

// NewMockLogDriver creates a new mock instance
func NewMockLogDriver(ctrl *gomock.Controller) *MockLogDriver {
	mock := &MockLogDriver{ctrl: ctrl}
	mock.recorder = &MockLogDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogDriver) EXPECT() *MockLogDriverMockRecorder {
	return m.recorder
}

// Type mocks base method
func (m *MockLogDriver) Type() logger.LogDriverType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(logger.LogDriverType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockLogDriverMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockLogDriver)(nil).Type))
}

// WriteLogMessage mocks base method
func (m *MockLogDriver) WriteLogMessage(msg *logger.LogMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLogMessage", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLogMessage indicates an expected call of WriteLogMessage
func (mr *MockLogDriverMockRecorder) WriteLogMessage(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLogMessage", reflect.TypeOf((*MockLogDriver)(nil).WriteLogMessage), msg)
}

// Close mocks base method
func (m *MockLogDriver) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockLogDriverMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLogDriver)(nil).Close))
}
