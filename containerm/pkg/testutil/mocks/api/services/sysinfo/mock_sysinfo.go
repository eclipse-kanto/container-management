// Copyright (c) 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eclipse-kanto/container-management/containerm/api/services/sysinfo (interfaces: SystemInfoClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sysinfo "github.com/eclipse-kanto/container-management/containerm/api/services/sysinfo"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSystemInfoClient is a mock of SystemInfoClient interface
type MockSystemInfoClient struct {
	ctrl     *gomock.Controller
	recorder *MockSystemInfoClientMockRecorder
}

// MockSystemInfoClientMockRecorder is the mock recorder for MockSystemInfoClient
type MockSystemInfoClientMockRecorder struct {
	mock *MockSystemInfoClient
}

// NewMockSystemInfoClient creates a new mock instance
func NewMockSystemInfoClient(ctrl *gomock.Controller) *MockSystemInfoClient {
	mock := &MockSystemInfoClient{ctrl: ctrl}
	mock.recorder = &MockSystemInfoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystemInfoClient) EXPECT() *MockSystemInfoClientMockRecorder {
	return m.recorder
}

// ProjectInfo mocks base method
func (m *MockSystemInfoClient) ProjectInfo(arg0 context.Context, arg1 *empty.Empty, arg2 ...grpc.CallOption) (*sysinfo.ProjectInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProjectInfo", varargs...)
	ret0, _ := ret[0].(*sysinfo.ProjectInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectInfo indicates an expected call of ProjectInfo
func (mr *MockSystemInfoClientMockRecorder) ProjectInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectInfo", reflect.TypeOf((*MockSystemInfoClient)(nil).ProjectInfo), varargs...)
}
