// Copyright (c) 2022 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0
//
// SPDX-License-Identifier: EPL-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: containerm/ctr/ctrd_decrypt_mgr.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	types "github.com/eclipse-kanto/container-management/containerm/containers/types"
	reflect "reflect"

	containerd "github.com/containerd/containerd"
	ocicryptconfig "github.com/containers/ocicrypt/config"
	gomock "github.com/golang/mock/gomock"
)

// MockcontainerDecryptMgr is a mock of containerDecryptMgr interface.
type MockcontainerDecryptMgr struct {
	ctrl     *gomock.Controller
	recorder *MockcontainerDecryptMgrMockRecorder
}

// MockcontainerDecryptMgrMockRecorder is the mock recorder for MockcontainerDecryptMgr.
type MockcontainerDecryptMgrMockRecorder struct {
	mock *MockcontainerDecryptMgr
}

// NewMockcontainerDecryptMgr creates a new mock instance.
func NewMockcontainerDecryptMgr(ctrl *gomock.Controller) *MockcontainerDecryptMgr {
	mock := &MockcontainerDecryptMgr{ctrl: ctrl}
	mock.recorder = &MockcontainerDecryptMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcontainerDecryptMgr) EXPECT() *MockcontainerDecryptMgrMockRecorder {
	return m.recorder
}

// CheckAuthorization mocks base method.
func (m *MockcontainerDecryptMgr) CheckAuthorization(ctx context.Context, image containerd.Image, config *ocicryptconfig.DecryptConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthorization", ctx, image, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAuthorization indicates an expected call of CheckAuthorization.
func (mr *MockcontainerDecryptMgrMockRecorder) CheckAuthorization(ctx, image, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthorization", reflect.TypeOf((*MockcontainerDecryptMgr)(nil).CheckAuthorization), ctx, image, config)
}

// GetDecryptConfig mocks base method.
func (m *MockcontainerDecryptMgr) GetDecryptConfig(config *types.DecryptConfig) (*ocicryptconfig.DecryptConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecryptConfig", config)
	ret0, _ := ret[0].(*ocicryptconfig.DecryptConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDecryptConfig indicates an expected call of GetDecryptConfig.
func (mr *MockcontainerDecryptMgrMockRecorder) GetDecryptConfig(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecryptConfig", reflect.TypeOf((*MockcontainerDecryptMgr)(nil).GetDecryptConfig), config)
}
