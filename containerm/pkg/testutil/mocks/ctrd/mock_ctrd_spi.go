// Copyright (c) 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0
//
// SPDX-License-Identifier: EPL-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: containerm/ctr/ctrd_spi.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	containerd "github.com/containerd/containerd"
	cio "github.com/containerd/containerd/cio"
	events "github.com/containerd/containerd/events"
	leases "github.com/containerd/containerd/leases"
	snapshots "github.com/containerd/containerd/snapshots"
	gomock "github.com/golang/mock/gomock"
)

// MockcontainerClientWrapper is a mock of containerClientWrapper interface.
type MockcontainerClientWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockcontainerClientWrapperMockRecorder
}

// MockcontainerClientWrapperMockRecorder is the mock recorder for MockcontainerClientWrapper.
type MockcontainerClientWrapperMockRecorder struct {
	mock *MockcontainerClientWrapper
}

// NewMockcontainerClientWrapper creates a new mock instance.
func NewMockcontainerClientWrapper(ctrl *gomock.Controller) *MockcontainerClientWrapper {
	mock := &MockcontainerClientWrapper{ctrl: ctrl}
	mock.recorder = &MockcontainerClientWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcontainerClientWrapper) EXPECT() *MockcontainerClientWrapperMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockcontainerClientWrapper) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockcontainerClientWrapperMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockcontainerClientWrapper)(nil).Close))
}

// GetImage mocks base method.
func (m *MockcontainerClientWrapper) GetImage(ctx context.Context, ref string) (containerd.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", ctx, ref)
	ret0, _ := ret[0].(containerd.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockcontainerClientWrapperMockRecorder) GetImage(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockcontainerClientWrapper)(nil).GetImage), ctx, ref)
}

// LeasesService mocks base method.
func (m *MockcontainerClientWrapper) LeasesService() leases.Manager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeasesService")
	ret0, _ := ret[0].(leases.Manager)
	return ret0
}

// LeasesService indicates an expected call of LeasesService.
func (mr *MockcontainerClientWrapperMockRecorder) LeasesService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeasesService", reflect.TypeOf((*MockcontainerClientWrapper)(nil).LeasesService))
}

// LoadContainer mocks base method.
func (m *MockcontainerClientWrapper) LoadContainer(ctx context.Context, id string) (containerd.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadContainer", ctx, id)
	ret0, _ := ret[0].(containerd.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadContainer indicates an expected call of LoadContainer.
func (mr *MockcontainerClientWrapperMockRecorder) LoadContainer(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadContainer", reflect.TypeOf((*MockcontainerClientWrapper)(nil).LoadContainer), ctx, id)
}

// NewContainer mocks base method.
func (m *MockcontainerClientWrapper) NewContainer(ctx context.Context, id string, opts ...containerd.NewContainerOpts) (containerd.Container, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewContainer", varargs...)
	ret0, _ := ret[0].(containerd.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewContainer indicates an expected call of NewContainer.
func (mr *MockcontainerClientWrapperMockRecorder) NewContainer(ctx, id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewContainer", reflect.TypeOf((*MockcontainerClientWrapper)(nil).NewContainer), varargs...)
}

// Pull mocks base method.
func (m *MockcontainerClientWrapper) Pull(ctx context.Context, ref string, opts ...containerd.RemoteOpt) (containerd.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, ref}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Pull", varargs...)
	ret0, _ := ret[0].(containerd.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pull indicates an expected call of Pull.
func (mr *MockcontainerClientWrapperMockRecorder) Pull(ctx, ref interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, ref}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockcontainerClientWrapper)(nil).Pull), varargs...)
}

// SnapshotService mocks base method.
func (m *MockcontainerClientWrapper) SnapshotService(snapshotterName string) snapshots.Snapshotter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotService", snapshotterName)
	ret0, _ := ret[0].(snapshots.Snapshotter)
	return ret0
}

// SnapshotService indicates an expected call of SnapshotService.
func (mr *MockcontainerClientWrapperMockRecorder) SnapshotService(snapshotterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotService", reflect.TypeOf((*MockcontainerClientWrapper)(nil).SnapshotService), snapshotterName)
}

// Subscribe mocks base method.
func (m *MockcontainerClientWrapper) Subscribe(ctx context.Context, filters ...string) (<-chan *events.Envelope, <-chan error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(<-chan *events.Envelope)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockcontainerClientWrapperMockRecorder) Subscribe(ctx interface{}, filters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockcontainerClientWrapper)(nil).Subscribe), varargs...)
}

// MockcontainerdSpi is a mock of containerdSpi interface.
type MockcontainerdSpi struct {
	ctrl     *gomock.Controller
	recorder *MockcontainerdSpiMockRecorder
}

// MockcontainerdSpiMockRecorder is the mock recorder for MockcontainerdSpi.
type MockcontainerdSpiMockRecorder struct {
	mock *MockcontainerdSpi
}

// NewMockcontainerdSpi creates a new mock instance.
func NewMockcontainerdSpi(ctrl *gomock.Controller) *MockcontainerdSpi {
	mock := &MockcontainerdSpi{ctrl: ctrl}
	mock.recorder = &MockcontainerdSpiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcontainerdSpi) EXPECT() *MockcontainerdSpiMockRecorder {
	return m.recorder
}

// CreateContainer mocks base method.
func (m *MockcontainerdSpi) CreateContainer(ctx context.Context, containerID string, opts ...containerd.NewContainerOpts) (containerd.Container, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, containerID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateContainer", varargs...)
	ret0, _ := ret[0].(containerd.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockcontainerdSpiMockRecorder) CreateContainer(ctx, containerID interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, containerID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockcontainerdSpi)(nil).CreateContainer), varargs...)
}

// CreateTask mocks base method.
func (m *MockcontainerdSpi) CreateTask(ctx context.Context, container containerd.Container, cioCreatorFunc cio.Creator, opts ...containerd.NewTaskOpts) (containerd.Task, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, container, cioCreatorFunc}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTask", varargs...)
	ret0, _ := ret[0].(containerd.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockcontainerdSpiMockRecorder) CreateTask(ctx, container, cioCreatorFunc interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, container, cioCreatorFunc}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockcontainerdSpi)(nil).CreateTask), varargs...)
}

// Dispose mocks base method.
func (m *MockcontainerdSpi) Dispose(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispose", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispose indicates an expected call of Dispose.
func (mr *MockcontainerdSpiMockRecorder) Dispose(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispose", reflect.TypeOf((*MockcontainerdSpi)(nil).Dispose), ctx)
}

// GetImage mocks base method.
func (m *MockcontainerdSpi) GetImage(ctx context.Context, imageRef string) (containerd.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", ctx, imageRef)
	ret0, _ := ret[0].(containerd.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockcontainerdSpiMockRecorder) GetImage(ctx, imageRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockcontainerdSpi)(nil).GetImage), ctx, imageRef)
}

// GetSnapshot mocks base method.
func (m *MockcontainerdSpi) GetSnapshot(ctx context.Context, containerID string) (snapshots.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot", ctx, containerID)
	ret0, _ := ret[0].(snapshots.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockcontainerdSpiMockRecorder) GetSnapshot(ctx, containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockcontainerdSpi)(nil).GetSnapshot), ctx, containerID)
}

// GetSnapshotID mocks base method.
func (m *MockcontainerdSpi) GetSnapshotID(containerID string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotID", containerID)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSnapshotID indicates an expected call of GetSnapshotID.
func (mr *MockcontainerdSpiMockRecorder) GetSnapshotID(containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotID", reflect.TypeOf((*MockcontainerdSpi)(nil).GetSnapshotID), containerID)
}

// LoadContainer mocks base method.
func (m *MockcontainerdSpi) LoadContainer(ctx context.Context, containerID string) (containerd.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadContainer", ctx, containerID)
	ret0, _ := ret[0].(containerd.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadContainer indicates an expected call of LoadContainer.
func (mr *MockcontainerdSpiMockRecorder) LoadContainer(ctx, containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadContainer", reflect.TypeOf((*MockcontainerdSpi)(nil).LoadContainer), ctx, containerID)
}

// LoadTask mocks base method.
func (m *MockcontainerdSpi) LoadTask(ctx context.Context, container containerd.Container, reattachFunc cio.Attach) (containerd.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTask", ctx, container, reattachFunc)
	ret0, _ := ret[0].(containerd.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTask indicates an expected call of LoadTask.
func (mr *MockcontainerdSpiMockRecorder) LoadTask(ctx, container, reattachFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTask", reflect.TypeOf((*MockcontainerdSpi)(nil).LoadTask), ctx, container, reattachFunc)
}

// MountSnapshot mocks base method.
func (m *MockcontainerdSpi) MountSnapshot(ctx context.Context, containerID, rootFS string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountSnapshot", ctx, containerID, rootFS)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountSnapshot indicates an expected call of MountSnapshot.
func (mr *MockcontainerdSpiMockRecorder) MountSnapshot(ctx, containerID, rootFS interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountSnapshot", reflect.TypeOf((*MockcontainerdSpi)(nil).MountSnapshot), ctx, containerID, rootFS)
}

// PrepareSnapshot mocks base method.
func (m *MockcontainerdSpi) PrepareSnapshot(ctx context.Context, containerID string, image containerd.Image, opts ...containerd.UnpackOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, containerID, image}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrepareSnapshot", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareSnapshot indicates an expected call of PrepareSnapshot.
func (mr *MockcontainerdSpiMockRecorder) PrepareSnapshot(ctx, containerID, image interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, containerID, image}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareSnapshot", reflect.TypeOf((*MockcontainerdSpi)(nil).PrepareSnapshot), varargs...)
}

// PullImage mocks base method.
func (m *MockcontainerdSpi) PullImage(ctx context.Context, imageRef string, opts ...containerd.RemoteOpt) (containerd.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, imageRef}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PullImage", varargs...)
	ret0, _ := ret[0].(containerd.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullImage indicates an expected call of PullImage.
func (mr *MockcontainerdSpiMockRecorder) PullImage(ctx, imageRef interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, imageRef}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullImage", reflect.TypeOf((*MockcontainerdSpi)(nil).PullImage), varargs...)
}

// RemoveSnapshot mocks base method.
func (m *MockcontainerdSpi) RemoveSnapshot(ctx context.Context, containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSnapshot", ctx, containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSnapshot indicates an expected call of RemoveSnapshot.
func (mr *MockcontainerdSpiMockRecorder) RemoveSnapshot(ctx, containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSnapshot", reflect.TypeOf((*MockcontainerdSpi)(nil).RemoveSnapshot), ctx, containerID)
}

// Subscribe mocks base method.
func (m *MockcontainerdSpi) Subscribe(ctx context.Context, filters ...string) (<-chan *events.Envelope, <-chan error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(<-chan *events.Envelope)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockcontainerdSpiMockRecorder) Subscribe(ctx interface{}, filters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockcontainerdSpi)(nil).Subscribe), varargs...)
}

// UnmountSnapshot mocks base method.
func (m *MockcontainerdSpi) UnmountSnapshot(ctx context.Context, containerID, rootFS string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmountSnapshot", ctx, containerID, rootFS)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmountSnapshot indicates an expected call of UnmountSnapshot.
func (mr *MockcontainerdSpiMockRecorder) UnmountSnapshot(ctx, containerID, rootFS interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountSnapshot", reflect.TypeOf((*MockcontainerdSpi)(nil).UnmountSnapshot), ctx, containerID, rootFS)
}

// UnpackImage mocks base method.
func (m *MockcontainerdSpi) UnpackImage(ctx context.Context, image containerd.Image, opts ...containerd.UnpackOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, image}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnpackImage", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpackImage indicates an expected call of UnpackImage.
func (mr *MockcontainerdSpiMockRecorder) UnpackImage(ctx, image interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, image}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpackImage", reflect.TypeOf((*MockcontainerdSpi)(nil).UnpackImage), varargs...)
}
