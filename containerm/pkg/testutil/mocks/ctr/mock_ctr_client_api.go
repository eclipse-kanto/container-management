// Copyright (c) 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0
//
// SPDX-License-Identifier: EPL-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: ./containerm/ctr/ctr_client_api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	types "github.com/eclipse-kanto/container-management/containerm/containers/types"
	ctr "github.com/eclipse-kanto/container-management/containerm/ctr"
	streams "github.com/eclipse-kanto/container-management/containerm/streams"
	gomock "github.com/golang/mock/gomock"
)

// MockContainerAPIClient is a mock of ContainerAPIClient interface
type MockContainerAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockContainerAPIClientMockRecorder
}

// MockContainerAPIClientMockRecorder is the mock recorder for MockContainerAPIClient
type MockContainerAPIClientMockRecorder struct {
	mock *MockContainerAPIClient
}

// NewMockContainerAPIClient creates a new mock instance
func NewMockContainerAPIClient(ctrl *gomock.Controller) *MockContainerAPIClient {
	mock := &MockContainerAPIClient{ctrl: ctrl}
	mock.recorder = &MockContainerAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContainerAPIClient) EXPECT() *MockContainerAPIClientMockRecorder {
	return m.recorder
}

// DestroyContainer mocks base method
func (m *MockContainerAPIClient) DestroyContainer(ctx context.Context, container *types.Container, stopOpts *types.StopOpts, clearIOs bool) (int64, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyContainer", ctx, container, stopOpts, clearIOs)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DestroyContainer indicates an expected call of DestroyContainer
func (mr *MockContainerAPIClientMockRecorder) DestroyContainer(ctx, container, stopOpts, clearIOs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyContainer", reflect.TypeOf((*MockContainerAPIClient)(nil).DestroyContainer), ctx, container, stopOpts, clearIOs)
}

// CreateContainer mocks base method
func (m *MockContainerAPIClient) CreateContainer(ctx context.Context, container *types.Container, checkpointDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", ctx, container, checkpointDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContainer indicates an expected call of CreateContainer
func (mr *MockContainerAPIClientMockRecorder) CreateContainer(ctx, container, checkpointDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockContainerAPIClient)(nil).CreateContainer), ctx, container, checkpointDir)
}

// StartContainer mocks base method
func (m *MockContainerAPIClient) StartContainer(ctx context.Context, container *types.Container, checkpointDir string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContainer", ctx, container, checkpointDir)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartContainer indicates an expected call of StartContainer
func (mr *MockContainerAPIClientMockRecorder) StartContainer(ctx, container, checkpointDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContainer", reflect.TypeOf((*MockContainerAPIClient)(nil).StartContainer), ctx, container, checkpointDir)
}

// GetContainerStats mocks base method.
func (m *MockContainerAPIClient) GetContainerStats(ctx context.Context, container *types.Container) (*types.CPUStats, *types.MemoryStats, *types.IOStats, uint64, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerStats", ctx, container)
	ret0, _ := ret[0].(*types.CPUStats)
	ret1, _ := ret[1].(*types.MemoryStats)
	ret2, _ := ret[2].(*types.IOStats)
	ret3, _ := ret[3].(uint64)
	ret4, _ := ret[4].(time.Time)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// GetContainerStats indicates an expected call of GetContainerStats.
func (mr *MockContainerAPIClientMockRecorder) GetContainerStats(ctx, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerStats", reflect.TypeOf((*MockContainerAPIClient)(nil).GetContainerStats), ctx, container)
}

// AttachContainer mocks base method
func (m *MockContainerAPIClient) AttachContainer(ctx context.Context, container *types.Container, attachConfig *streams.AttachConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachContainer", ctx, container, attachConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachContainer indicates an expected call of AttachContainer
func (mr *MockContainerAPIClientMockRecorder) AttachContainer(ctx, container, attachConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachContainer", reflect.TypeOf((*MockContainerAPIClient)(nil).AttachContainer), ctx, container, attachConfig)
}

// PauseContainer mocks base method
func (m *MockContainerAPIClient) PauseContainer(ctx context.Context, container *types.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseContainer", ctx, container)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseContainer indicates an expected call of PauseContainer
func (mr *MockContainerAPIClientMockRecorder) PauseContainer(ctx, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseContainer", reflect.TypeOf((*MockContainerAPIClient)(nil).PauseContainer), ctx, container)
}

// UnpauseContainer mocks base method
func (m *MockContainerAPIClient) UnpauseContainer(ctx context.Context, container *types.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpauseContainer", ctx, container)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpauseContainer indicates an expected call of UnpauseContainer
func (mr *MockContainerAPIClientMockRecorder) UnpauseContainer(ctx, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpauseContainer", reflect.TypeOf((*MockContainerAPIClient)(nil).UnpauseContainer), ctx, container)
}

// RestoreContainer mocks base method
func (m *MockContainerAPIClient) RestoreContainer(ctx context.Context, container *types.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreContainer", ctx, container)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreContainer indicates an expected call of RestoreContainer
func (mr *MockContainerAPIClientMockRecorder) RestoreContainer(ctx, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreContainer", reflect.TypeOf((*MockContainerAPIClient)(nil).RestoreContainer), ctx, container)
}

// Dispose mocks base method
func (m *MockContainerAPIClient) Dispose(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispose", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispose indicates an expected call of Dispose
func (mr *MockContainerAPIClientMockRecorder) Dispose(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispose", reflect.TypeOf((*MockContainerAPIClient)(nil).Dispose), ctx)
}

// ListContainers mocks base method
func (m *MockContainerAPIClient) ListContainers(ctx context.Context) ([]*types.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContainers", ctx)
	ret0, _ := ret[0].([]*types.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContainers indicates an expected call of ListContainers
func (mr *MockContainerAPIClientMockRecorder) ListContainers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContainers", reflect.TypeOf((*MockContainerAPIClient)(nil).ListContainers), ctx)
}

// GetContainerInfo mocks base method
func (m *MockContainerAPIClient) GetContainerInfo(ctx context.Context, id string) (*types.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerInfo", ctx, id)
	ret0, _ := ret[0].(*types.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerInfo indicates an expected call of GetContainerInfo
func (mr *MockContainerAPIClientMockRecorder) GetContainerInfo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerInfo", reflect.TypeOf((*MockContainerAPIClient)(nil).GetContainerInfo), ctx, id)
}

// ReleaseContainerResources mocks base method
func (m *MockContainerAPIClient) ReleaseContainerResources(ctx context.Context, container *types.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseContainerResources", ctx, container)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseContainerResources indicates an expected call of ReleaseContainerResources
func (mr *MockContainerAPIClientMockRecorder) ReleaseContainerResources(ctx, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseContainerResources", reflect.TypeOf((*MockContainerAPIClient)(nil).ReleaseContainerResources), ctx, container)
}

// SetContainerExitHooks mocks base method
func (m *MockContainerAPIClient) SetContainerExitHooks(hooks ...ctr.ContainerExitHook) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range hooks {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SetContainerExitHooks", varargs...)
}

// SetContainerExitHooks indicates an expected call of SetContainerExitHooks
func (mr *MockContainerAPIClientMockRecorder) SetContainerExitHooks(hooks ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContainerExitHooks", reflect.TypeOf((*MockContainerAPIClient)(nil).SetContainerExitHooks), hooks...)
}

// UpdateContainer mocks base method
func (m *MockContainerAPIClient) UpdateContainer(ctx context.Context, container *types.Container, reseources *types.Resources) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainer", ctx, container, reseources)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContainer indicates an expected call of UpdateContainer
func (mr *MockContainerAPIClientMockRecorder) UpdateContainer(ctx, container interface{}, resources interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainer", reflect.TypeOf((*MockContainerAPIClient)(nil).UpdateContainer), ctx, container, resources)
}
