// Copyright (c) 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: cli_command_ctrs_start.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	terminal "golang.org/x/crypto/ssh/terminal"
	reflect "reflect"
)

// MockterminalManager is a mock of terminalManager interface
type MockterminalManager struct {
	ctrl     *gomock.Controller
	recorder *MockterminalManagerMockRecorder
}

// MockterminalManagerMockRecorder is the mock recorder for MockterminalManager
type MockterminalManagerMockRecorder struct {
	mock *MockterminalManager
}

// NewMockterminalManager creates a new mock instance
func NewMockterminalManager(ctrl *gomock.Controller) *MockterminalManager {
	mock := &MockterminalManager{ctrl: ctrl}
	mock.recorder = &MockterminalManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockterminalManager) EXPECT() *MockterminalManagerMockRecorder {
	return m.recorder
}

// CheckTty mocks base method
func (m *MockterminalManager) CheckTty(attachStdin, ttyMode bool, fd uintptr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTty", attachStdin, ttyMode, fd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckTty indicates an expected call of CheckTty
func (mr *MockterminalManagerMockRecorder) CheckTty(attachStdin, ttyMode, fd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTty", reflect.TypeOf((*MockterminalManager)(nil).CheckTty), attachStdin, ttyMode, fd)
}

// SetRawMode mocks base method
func (m *MockterminalManager) SetRawMode(stdin, stdout bool) (*terminal.State, *terminal.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRawMode", stdin, stdout)
	ret0, _ := ret[0].(*terminal.State)
	ret1, _ := ret[1].(*terminal.State)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetRawMode indicates an expected call of SetRawMode
func (mr *MockterminalManagerMockRecorder) SetRawMode(stdin, stdout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRawMode", reflect.TypeOf((*MockterminalManager)(nil).SetRawMode), stdin, stdout)
}

// RestoreMode mocks base method
func (m *MockterminalManager) RestoreMode(in, out *terminal.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreMode", in, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreMode indicates an expected call of RestoreMode
func (mr *MockterminalManagerMockRecorder) RestoreMode(in, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreMode", reflect.TypeOf((*MockterminalManager)(nil).RestoreMode), in, out)
}
