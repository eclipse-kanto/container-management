// Copyright (c) 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v4.22.0
// source: api/types/containers/log_config.proto

package containers

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Log configuration for the container
type LogConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full log driver configuration
	DriverConfig *LogDriverConfiguration `protobuf:"bytes,1,opt,name=driver_config,json=driverConfig,proto3" json:"driver_config,omitempty"`
	// The full log mode configuration
	ModeConfig *LogModeConfiguration `protobuf:"bytes,2,opt,name=mode_config,json=modeConfig,proto3" json:"mode_config,omitempty"`
}

func (x *LogConfiguration) Reset() {
	*x = LogConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_containers_log_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogConfiguration) ProtoMessage() {}

func (x *LogConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_containers_log_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogConfiguration.ProtoReflect.Descriptor instead.
func (*LogConfiguration) Descriptor() ([]byte, []int) {
	return file_api_types_containers_log_config_proto_rawDescGZIP(), []int{0}
}

func (x *LogConfiguration) GetDriverConfig() *LogDriverConfiguration {
	if x != nil {
		return x.DriverConfig
	}
	return nil
}

func (x *LogConfiguration) GetModeConfig() *LogModeConfiguration {
	if x != nil {
		return x.ModeConfig
	}
	return nil
}

// Configures which of the available log drivers to be used and how
type LogDriverConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the driver - json-file, none
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Max number of files before rotating the log files
	MaxFiles int64 `protobuf:"varint,2,opt,name=max_files,json=maxFiles,proto3" json:"max_files,omitempty"`
	// Max size of the logs in the form of 1.2M, 5k, etc.
	MaxSize string `protobuf:"bytes,3,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	// Specify a root directory for the container's log files to be stored
	RootDir string `protobuf:"bytes,4,opt,name=root_dir,json=rootDir,proto3" json:"root_dir,omitempty"`
}

func (x *LogDriverConfiguration) Reset() {
	*x = LogDriverConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_containers_log_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogDriverConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogDriverConfiguration) ProtoMessage() {}

func (x *LogDriverConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_containers_log_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogDriverConfiguration.ProtoReflect.Descriptor instead.
func (*LogDriverConfiguration) Descriptor() ([]byte, []int) {
	return file_api_types_containers_log_config_proto_rawDescGZIP(), []int{1}
}

func (x *LogDriverConfiguration) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LogDriverConfiguration) GetMaxFiles() int64 {
	if x != nil {
		return x.MaxFiles
	}
	return 0
}

func (x *LogDriverConfiguration) GetMaxSize() string {
	if x != nil {
		return x.MaxSize
	}
	return ""
}

func (x *LogDriverConfiguration) GetRootDir() string {
	if x != nil {
		return x.RootDir
	}
	return ""
}

// Configures which of the supported log modes to be applied for the chosen log driver
type LogModeConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The logging mode - blocking, non-blocking
	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// The size of the buffer used in the form of 1.2M, 5k, etc. - applicable for non-blocking mode
	MaxBufferSize string `protobuf:"bytes,2,opt,name=max_buffer_size,json=maxBufferSize,proto3" json:"max_buffer_size,omitempty"`
}

func (x *LogModeConfiguration) Reset() {
	*x = LogModeConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_containers_log_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogModeConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogModeConfiguration) ProtoMessage() {}

func (x *LogModeConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_containers_log_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogModeConfiguration.ProtoReflect.Descriptor instead.
func (*LogModeConfiguration) Descriptor() ([]byte, []int) {
	return file_api_types_containers_log_config_proto_rawDescGZIP(), []int{2}
}

func (x *LogModeConfiguration) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *LogModeConfiguration) GetMaxBufferSize() string {
	if x != nil {
		return x.MaxBufferSize
	}
	return ""
}

var File_api_types_containers_log_config_proto protoreflect.FileDescriptor

var file_api_types_containers_log_config_proto_rawDesc = []byte{
	0x0a, 0x25, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x65, 0x5f, 0x6b, 0x61, 0x6e, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xa6, 0x02, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8a, 0x01, 0x0a, 0x0d,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x65, 0x5f, 0x6b, 0x61, 0x6e, 0x74, 0x6f, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x84, 0x01, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x63, 0x6c, 0x69,
	0x70, 0x73, 0x65, 0x5f, 0x6b, 0x61, 0x6e, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x4c,
	0x6f, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x7f, 0x0a, 0x16, 0x4c, 0x6f, 0x67, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x72,
	0x22, 0x52, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x53, 0x69, 0x7a, 0x65, 0x42, 0x5a, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x65, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x65, 0x2d, 0x6b, 0x61, 0x6e, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x6d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_types_containers_log_config_proto_rawDescOnce sync.Once
	file_api_types_containers_log_config_proto_rawDescData = file_api_types_containers_log_config_proto_rawDesc
)

func file_api_types_containers_log_config_proto_rawDescGZIP() []byte {
	file_api_types_containers_log_config_proto_rawDescOnce.Do(func() {
		file_api_types_containers_log_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_types_containers_log_config_proto_rawDescData)
	})
	return file_api_types_containers_log_config_proto_rawDescData
}

var file_api_types_containers_log_config_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_api_types_containers_log_config_proto_goTypes = []interface{}{
	(*LogConfiguration)(nil),       // 0: github.com.eclipse_kanto.container_management.containerm.api.types.containers.LogConfiguration
	(*LogDriverConfiguration)(nil), // 1: github.com.eclipse_kanto.container_management.containerm.api.types.containers.LogDriverConfiguration
	(*LogModeConfiguration)(nil),   // 2: github.com.eclipse_kanto.container_management.containerm.api.types.containers.LogModeConfiguration
}
var file_api_types_containers_log_config_proto_depIdxs = []int32{
	1, // 0: github.com.eclipse_kanto.container_management.containerm.api.types.containers.LogConfiguration.driver_config:type_name -> github.com.eclipse_kanto.container_management.containerm.api.types.containers.LogDriverConfiguration
	2, // 1: github.com.eclipse_kanto.container_management.containerm.api.types.containers.LogConfiguration.mode_config:type_name -> github.com.eclipse_kanto.container_management.containerm.api.types.containers.LogModeConfiguration
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_api_types_containers_log_config_proto_init() }
func file_api_types_containers_log_config_proto_init() {
	if File_api_types_containers_log_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_types_containers_log_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_containers_log_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogDriverConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_containers_log_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogModeConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_types_containers_log_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_types_containers_log_config_proto_goTypes,
		DependencyIndexes: file_api_types_containers_log_config_proto_depIdxs,
		MessageInfos:      file_api_types_containers_log_config_proto_msgTypes,
	}.Build()
	File_api_types_containers_log_config_proto = out.File
	file_api_types_containers_log_config_proto_rawDesc = nil
	file_api_types_containers_log_config_proto_goTypes = nil
	file_api_types_containers_log_config_proto_depIdxs = nil
}
