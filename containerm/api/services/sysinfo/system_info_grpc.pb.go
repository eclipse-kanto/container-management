// Copyright (c) 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: api/services/sysinfo/system_info.proto

package sysinfo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SystemInfo_ProjectInfo_FullMethodName = "/github.com.eclipse_kanto.container_management.containerm.api.services.sysinfo.SystemInfo/ProjectInfo"
)

// SystemInfoClient is the client API for SystemInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemInfoClient interface {
	ProjectInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProjectInfoResponse, error)
}

type systemInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemInfoClient(cc grpc.ClientConnInterface) SystemInfoClient {
	return &systemInfoClient{cc}
}

func (c *systemInfoClient) ProjectInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProjectInfoResponse, error) {
	out := new(ProjectInfoResponse)
	err := c.cc.Invoke(ctx, SystemInfo_ProjectInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemInfoServer is the server API for SystemInfo service.
// All implementations should embed UnimplementedSystemInfoServer
// for forward compatibility
type SystemInfoServer interface {
	ProjectInfo(context.Context, *emptypb.Empty) (*ProjectInfoResponse, error)
}

// UnimplementedSystemInfoServer should be embedded to have forward compatible implementations.
type UnimplementedSystemInfoServer struct {
}

func (UnimplementedSystemInfoServer) ProjectInfo(context.Context, *emptypb.Empty) (*ProjectInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectInfo not implemented")
}

// UnsafeSystemInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemInfoServer will
// result in compilation errors.
type UnsafeSystemInfoServer interface {
	mustEmbedUnimplementedSystemInfoServer()
}

func RegisterSystemInfoServer(s grpc.ServiceRegistrar, srv SystemInfoServer) {
	s.RegisterService(&SystemInfo_ServiceDesc, srv)
}

func _SystemInfo_ProjectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemInfoServer).ProjectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemInfo_ProjectInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemInfoServer).ProjectInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemInfo_ServiceDesc is the grpc.ServiceDesc for SystemInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.eclipse_kanto.container_management.containerm.api.services.sysinfo.SystemInfo",
	HandlerType: (*SystemInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProjectInfo",
			Handler:    _SystemInfo_ProjectInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/services/sysinfo/system_info.proto",
}
