// Copyright (c) 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: api/services/containers/containers.proto

package containers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Containers_Create_FullMethodName     = "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Create"
	Containers_Get_FullMethodName        = "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Get"
	Containers_List_FullMethodName       = "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/List"
	Containers_ListStream_FullMethodName = "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/ListStream"
	Containers_Start_FullMethodName      = "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Start"
	Containers_Attach_FullMethodName     = "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Attach"
	Containers_Stop_FullMethodName       = "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Stop"
	Containers_Update_FullMethodName     = "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Update"
	Containers_Restart_FullMethodName    = "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Restart"
	Containers_Pause_FullMethodName      = "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Pause"
	Containers_Unpause_FullMethodName    = "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Unpause"
	Containers_Rename_FullMethodName     = "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Rename"
	Containers_Remove_FullMethodName     = "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Remove"
	Containers_Logs_FullMethodName       = "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Logs"
)

// ContainersClient is the client API for Containers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContainersClient interface {
	Create(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error)
	Get(ctx context.Context, in *GetContainerRequest, opts ...grpc.CallOption) (*GetContainerResponse, error)
	List(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (*ListContainersResponse, error)
	ListStream(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (Containers_ListStreamClient, error)
	Start(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Attach(ctx context.Context, opts ...grpc.CallOption) (Containers_AttachClient, error)
	Stop(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *UpdateContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Restart(ctx context.Context, in *RestartContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Pause(ctx context.Context, in *PauseContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Unpause(ctx context.Context, in *UnpauseContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Rename(ctx context.Context, in *RenameContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Remove(ctx context.Context, in *RemoveContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Logs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (Containers_LogsClient, error)
}

type containersClient struct {
	cc grpc.ClientConnInterface
}

func NewContainersClient(cc grpc.ClientConnInterface) ContainersClient {
	return &containersClient{cc}
}

func (c *containersClient) Create(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error) {
	out := new(CreateContainerResponse)
	err := c.cc.Invoke(ctx, Containers_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Get(ctx context.Context, in *GetContainerRequest, opts ...grpc.CallOption) (*GetContainerResponse, error) {
	out := new(GetContainerResponse)
	err := c.cc.Invoke(ctx, Containers_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) List(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (*ListContainersResponse, error) {
	out := new(ListContainersResponse)
	err := c.cc.Invoke(ctx, Containers_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) ListStream(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (Containers_ListStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Containers_ServiceDesc.Streams[0], Containers_ListStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &containersListStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Containers_ListStreamClient interface {
	Recv() (*ListContainerMessage, error)
	grpc.ClientStream
}

type containersListStreamClient struct {
	grpc.ClientStream
}

func (x *containersListStreamClient) Recv() (*ListContainerMessage, error) {
	m := new(ListContainerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *containersClient) Start(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Containers_Start_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Attach(ctx context.Context, opts ...grpc.CallOption) (Containers_AttachClient, error) {
	stream, err := c.cc.NewStream(ctx, &Containers_ServiceDesc.Streams[1], Containers_Attach_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &containersAttachClient{stream}
	return x, nil
}

type Containers_AttachClient interface {
	Send(*AttachContainerRequest) error
	Recv() (*AttachContainerResponse, error)
	grpc.ClientStream
}

type containersAttachClient struct {
	grpc.ClientStream
}

func (x *containersAttachClient) Send(m *AttachContainerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *containersAttachClient) Recv() (*AttachContainerResponse, error) {
	m := new(AttachContainerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *containersClient) Stop(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Containers_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Update(ctx context.Context, in *UpdateContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Containers_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Restart(ctx context.Context, in *RestartContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Containers_Restart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Pause(ctx context.Context, in *PauseContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Containers_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Unpause(ctx context.Context, in *UnpauseContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Containers_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Rename(ctx context.Context, in *RenameContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Containers_Rename_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Remove(ctx context.Context, in *RemoveContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Containers_Remove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Logs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (Containers_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Containers_ServiceDesc.Streams[2], Containers_Logs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &containersLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Containers_LogsClient interface {
	Recv() (*GetLogsResponse, error)
	grpc.ClientStream
}

type containersLogsClient struct {
	grpc.ClientStream
}

func (x *containersLogsClient) Recv() (*GetLogsResponse, error) {
	m := new(GetLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContainersServer is the server API for Containers service.
// All implementations should embed UnimplementedContainersServer
// for forward compatibility
type ContainersServer interface {
	Create(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error)
	Get(context.Context, *GetContainerRequest) (*GetContainerResponse, error)
	List(context.Context, *ListContainersRequest) (*ListContainersResponse, error)
	ListStream(*ListContainersRequest, Containers_ListStreamServer) error
	Start(context.Context, *StartContainerRequest) (*emptypb.Empty, error)
	Attach(Containers_AttachServer) error
	Stop(context.Context, *StopContainerRequest) (*emptypb.Empty, error)
	Update(context.Context, *UpdateContainerRequest) (*emptypb.Empty, error)
	Restart(context.Context, *RestartContainerRequest) (*emptypb.Empty, error)
	Pause(context.Context, *PauseContainerRequest) (*emptypb.Empty, error)
	Unpause(context.Context, *UnpauseContainerRequest) (*emptypb.Empty, error)
	Rename(context.Context, *RenameContainerRequest) (*emptypb.Empty, error)
	Remove(context.Context, *RemoveContainerRequest) (*emptypb.Empty, error)
	Logs(*GetLogsRequest, Containers_LogsServer) error
}

// UnimplementedContainersServer should be embedded to have forward compatible implementations.
type UnimplementedContainersServer struct {
}

func (UnimplementedContainersServer) Create(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedContainersServer) Get(context.Context, *GetContainerRequest) (*GetContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedContainersServer) List(context.Context, *ListContainersRequest) (*ListContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedContainersServer) ListStream(*ListContainersRequest, Containers_ListStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListStream not implemented")
}
func (UnimplementedContainersServer) Start(context.Context, *StartContainerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedContainersServer) Attach(Containers_AttachServer) error {
	return status.Errorf(codes.Unimplemented, "method Attach not implemented")
}
func (UnimplementedContainersServer) Stop(context.Context, *StopContainerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedContainersServer) Update(context.Context, *UpdateContainerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedContainersServer) Restart(context.Context, *RestartContainerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedContainersServer) Pause(context.Context, *PauseContainerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedContainersServer) Unpause(context.Context, *UnpauseContainerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedContainersServer) Rename(context.Context, *RenameContainerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedContainersServer) Remove(context.Context, *RemoveContainerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedContainersServer) Logs(*GetLogsRequest, Containers_LogsServer) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}

// UnsafeContainersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainersServer will
// result in compilation errors.
type UnsafeContainersServer interface {
	mustEmbedUnimplementedContainersServer()
}

func RegisterContainersServer(s grpc.ServiceRegistrar, srv ContainersServer) {
	s.RegisterService(&Containers_ServiceDesc, srv)
}

func _Containers_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Containers_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Create(ctx, req.(*CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Containers_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Get(ctx, req.(*GetContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Containers_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).List(ctx, req.(*ListContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_ListStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListContainersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainersServer).ListStream(m, &containersListStreamServer{stream})
}

type Containers_ListStreamServer interface {
	Send(*ListContainerMessage) error
	grpc.ServerStream
}

type containersListStreamServer struct {
	grpc.ServerStream
}

func (x *containersListStreamServer) Send(m *ListContainerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Containers_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Containers_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Start(ctx, req.(*StartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Attach_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContainersServer).Attach(&containersAttachServer{stream})
}

type Containers_AttachServer interface {
	Send(*AttachContainerResponse) error
	Recv() (*AttachContainerRequest, error)
	grpc.ServerStream
}

type containersAttachServer struct {
	grpc.ServerStream
}

func (x *containersAttachServer) Send(m *AttachContainerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *containersAttachServer) Recv() (*AttachContainerRequest, error) {
	m := new(AttachContainerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Containers_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Containers_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Stop(ctx, req.(*StopContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Containers_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Update(ctx, req.(*UpdateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Containers_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Restart(ctx, req.(*RestartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Containers_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Pause(ctx, req.(*PauseContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpauseContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Containers_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Unpause(ctx, req.(*UnpauseContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Containers_Rename_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Rename(ctx, req.(*RenameContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Containers_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Remove(ctx, req.(*RemoveContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainersServer).Logs(m, &containersLogsServer{stream})
}

type Containers_LogsServer interface {
	Send(*GetLogsResponse) error
	grpc.ServerStream
}

type containersLogsServer struct {
	grpc.ServerStream
}

func (x *containersLogsServer) Send(m *GetLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Containers_ServiceDesc is the grpc.ServiceDesc for Containers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Containers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers",
	HandlerType: (*ContainersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Containers_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Containers_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Containers_List_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Containers_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Containers_Stop_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Containers_Update_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _Containers_Restart_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _Containers_Pause_Handler,
		},
		{
			MethodName: "Unpause",
			Handler:    _Containers_Unpause_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _Containers_Rename_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Containers_Remove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListStream",
			Handler:       _Containers_ListStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Attach",
			Handler:       _Containers_Attach_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Logs",
			Handler:       _Containers_Logs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/services/containers/containers.proto",
}
